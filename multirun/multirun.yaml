hydra:
  run:
    dir: outputs/${model.name}/${hydra.job.name}/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun
    subdir: ${hydra.job.override_dirname}
  launcher:
    _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
    n_jobs: -1
    backend: null
    prefer: processes
    require: null
    verbose: 0
    timeout: null
    pre_dispatch: 2*n_jobs
    batch_size: auto
    temp_folder: null
    max_nbytes: null
    mmap_mode: r
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - data.n_workers=0
    - data.n_labeled=100,1000
  job:
    name: train_semi
    chdir: null
    override_dirname: data.n_labeled=100,1000,data.n_workers=0
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /Users/chrissantiago/Dropbox/GitHub/vime
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /Users/chrissantiago/Dropbox/GitHub/vime/vime/conf
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      callbacks: default
      trainer: default
      model: learner
      optimizer@model.optimizer: adam
      data: mnist
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: joblib
      hydra/output: default
  verbose: false
data:
  batch_size: 1024
  n_workers: 0
  n_labeled: 0.1
  unlabeled:
    _target_: torch.utils.data.DataLoader
    dataset:
      _target_: vime.data.get_mnist_train
      n_labeled: ${data.n_labeled}
      labeled: false
    batch_size: ${data.batch_size}
    shuffle: true
    num_workers: ${data.n_workers}
  labeled:
    _target_: torch.utils.data.DataLoader
    dataset:
      _target_: vime.data.get_mnist_train
      n_labeled: ${data.n_labeled}
      labeled: true
    batch_size: ${data.batch_size}
    shuffle: true
    num_workers: ${data.n_workers}
  valid:
    _target_: torch.utils.data.DataLoader
    dataset:
      _target_: vime.data.get_mnist_test
    batch_size: ${data.batch_size}
    shuffle: false
    num_workers: ${data.n_workers}
model:
  optimizer:
    _target_: torch.optim.Adam
    _partial_: true
    lr: 0.001
    betas:
    - 0.9
    - 0.999
    weight_decay: 0
  name: vime-learner
  nn:
    _target_: vime.models.semi.VimeLearner
    encoder_ckpt: outputs/vime-encoder/train_self/2023-05-26/10-09-22/checkpoints/epoch=38-step=2067.ckpt
    classifier:
      _target_: vime.models.mlp.VimeMLP
      hidden_size: 128
      n_layers: 3
      out_size: 10
      batch_norm: false
    n_augments: 3
    beta: 0.5
    score_func:
      _target_: torchmetrics.Accuracy
      task: multiclass
      num_classes: 10
  scheduler:
    _target_: torch.optim.lr_scheduler.ReduceLROnPlateau
    _partial_: true
    mode: min
    factor: 0.1
    patience: 10
trainer:
  _target_: pytorch_lightning.Trainer
  max_epochs: 100
  accelerator: mps
  devices: 1
  logger:
    _target_: pytorch_lightning.loggers.WandbLogger
    project: VIME
    group: null
    job_type: null
    save_dir: ${hydra:runtime.output_dir}
    log_model: true
callbacks:
  model_summary:
    _target_: pytorch_lightning.callbacks.RichModelSummary
  progress_bar:
    _target_: pytorch_lightning.callbacks.RichProgressBar
    refresh_rate: 5
    leave: true
  early_stopping:
    _target_: pytorch_lightning.callbacks.EarlyStopping
    monitor: valid-loss
    min_delta: 0.001
    patience: 5
    check_on_train_epoch_end: true
  model_checkpoint:
    _target_: pytorch_lightning.callbacks.ModelCheckpoint
    dirpath: ${hydra:runtime.output_dir}/checkpoints
    monitor: valid-loss
    save_top_k: 1
    save_on_train_epoch_end: true
